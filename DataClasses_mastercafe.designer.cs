#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Server
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="mastercafedb")]
	public partial class DataContext_mastercafe : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertban(ban instance);
    partial void Updateban(ban instance);
    partial void Deleteban(ban instance);
    partial void Inserttimecode(timecode instance);
    partial void Updatetimecode(timecode instance);
    partial void Deletetimecode(timecode instance);
    partial void Insertcategory(category instance);
    partial void Updatecategory(category instance);
    partial void Deletecategory(category instance);
    partial void Insertclient(client instance);
    partial void Updateclient(client instance);
    partial void Deleteclient(client instance);
    partial void Insertconfig(config instance);
    partial void Updateconfig(config instance);
    partial void Deleteconfig(config instance);
    partial void Insertemployee(employee instance);
    partial void Updateemployee(employee instance);
    partial void Deleteemployee(employee instance);
    partial void Insertemployee_hour(employee_hour instance);
    partial void Updateemployee_hour(employee_hour instance);
    partial void Deleteemployee_hour(employee_hour instance);
    partial void Insertemployee_member(employee_member instance);
    partial void Updateemployee_member(employee_member instance);
    partial void Deleteemployee_member(employee_member instance);
    partial void Insertemployee_sale(employee_sale instance);
    partial void Updateemployee_sale(employee_sale instance);
    partial void Deleteemployee_sale(employee_sale instance);
    partial void Insertemployee_timecode(employee_timecode instance);
    partial void Updateemployee_timecode(employee_timecode instance);
    partial void Deleteemployee_timecode(employee_timecode instance);
    partial void Insertgroup(group instance);
    partial void Updategroup(group instance);
    partial void Deletegroup(group instance);
    partial void Inserthourtemplate(hourtemplate instance);
    partial void Updatehourtemplate(hourtemplate instance);
    partial void Deletehourtemplate(hourtemplate instance);
    partial void Insertitem(item instance);
    partial void Updateitem(item instance);
    partial void Deleteitem(item instance);
    partial void Insertmember(member instance);
    partial void Updatemember(member instance);
    partial void Deletemember(member instance);
    partial void Insertreserve(reserve instance);
    partial void Updatereserve(reserve instance);
    partial void Deletereserve(reserve instance);
    #endregion
		
		public DataContext_mastercafe() : 
				base(Program.constr, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext_mastercafe(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext_mastercafe(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext_mastercafe(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext_mastercafe(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ban> bans
		{
			get
			{
				return this.GetTable<ban>();
			}
		}
		
		public System.Data.Linq.Table<timecode> timecodes
		{
			get
			{
				return this.GetTable<timecode>();
			}
		}
		
		public System.Data.Linq.Table<category> categories
		{
			get
			{
				return this.GetTable<category>();
			}
		}
		
		public System.Data.Linq.Table<client> clients
		{
			get
			{
				return this.GetTable<client>();
			}
		}
		
		public System.Data.Linq.Table<config> configs
		{
			get
			{
				return this.GetTable<config>();
			}
		}
		
		public System.Data.Linq.Table<employee> employees
		{
			get
			{
				return this.GetTable<employee>();
			}
		}
		
		public System.Data.Linq.Table<employee_hour> employee_hours
		{
			get
			{
				return this.GetTable<employee_hour>();
			}
		}
		
		public System.Data.Linq.Table<employee_member> employee_members
		{
			get
			{
				return this.GetTable<employee_member>();
			}
		}
		
		public System.Data.Linq.Table<employee_sale> employee_sales
		{
			get
			{
				return this.GetTable<employee_sale>();
			}
		}
		
		public System.Data.Linq.Table<employee_timecode> employee_timecodes
		{
			get
			{
				return this.GetTable<employee_timecode>();
			}
		}
		
		public System.Data.Linq.Table<group> groups
		{
			get
			{
				return this.GetTable<group>();
			}
		}
		
		public System.Data.Linq.Table<hourtemplate> hourtemplates
		{
			get
			{
				return this.GetTable<hourtemplate>();
			}
		}
		
		public System.Data.Linq.Table<item> items
		{
			get
			{
				return this.GetTable<item>();
			}
		}
		
		public System.Data.Linq.Table<member> members
		{
			get
			{
				return this.GetTable<member>();
			}
		}
		
		public System.Data.Linq.Table<reserve> reserves
		{
			get
			{
				return this.GetTable<reserve>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ban")]
	public partial class ban : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _word;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnwordChanging(string value);
    partial void OnwordChanged();
    #endregion
		
		public ban()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_word", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string word
		{
			get
			{
				return this._word;
			}
			set
			{
				if ((this._word != value))
				{
					this.OnwordChanging(value);
					this.SendPropertyChanging();
					this._word = value;
					this.SendPropertyChanged("word");
					this.OnwordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.timecode")]
	public partial class timecode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _code;
		
		private int _money;
		
		private System.DateTime _ot;
		
		private EntitySet<client> _clients;
		
		private EntitySet<employee_timecode> _employee_timecodes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnmoneyChanging(int value);
    partial void OnmoneyChanged();
    partial void OnotChanging(System.DateTime value);
    partial void OnotChanged();
    #endregion
		
		public timecode()
		{
			this._clients = new EntitySet<client>(new Action<client>(this.attach_clients), new Action<client>(this.detach_clients));
			this._employee_timecodes = new EntitySet<employee_timecode>(new Action<employee_timecode>(this.attach_employee_timecodes), new Action<employee_timecode>(this.detach_employee_timecodes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_money", DbType="Int NOT NULL")]
		public int money
		{
			get
			{
				return this._money;
			}
			set
			{
				if ((this._money != value))
				{
					this.OnmoneyChanging(value);
					this.SendPropertyChanging();
					this._money = value;
					this.SendPropertyChanged("money");
					this.OnmoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ot", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ot
		{
			get
			{
				return this._ot;
			}
			set
			{
				if ((this._ot != value))
				{
					this.OnotChanging(value);
					this.SendPropertyChanging();
					this._ot = value;
					this.SendPropertyChanged("ot");
					this.OnotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="timecode_client", Storage="_clients", ThisKey="code", OtherKey="tc")]
		public EntitySet<client> clients
		{
			get
			{
				return this._clients;
			}
			set
			{
				this._clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="timecode_employee_timecode", Storage="_employee_timecodes", ThisKey="code", OtherKey="timecode_code")]
		public EntitySet<employee_timecode> employee_timecodes
		{
			get
			{
				return this._employee_timecodes;
			}
			set
			{
				this._employee_timecodes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_clients(client entity)
		{
			this.SendPropertyChanging();
			entity.timecode = this;
		}
		
		private void detach_clients(client entity)
		{
			this.SendPropertyChanging();
			entity.timecode = null;
		}
		
		private void attach_employee_timecodes(employee_timecode entity)
		{
			this.SendPropertyChanging();
			entity.timecode = this;
		}
		
		private void detach_employee_timecodes(employee_timecode entity)
		{
			this.SendPropertyChanging();
			entity.timecode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.category")]
	public partial class category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _name;
		
		private EntitySet<item> _items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public category()
		{
			this._items = new EntitySet<item>(new Action<item>(this.attach_items), new Action<item>(this.detach_items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_item", Storage="_items", ThisKey="id", OtherKey="category_id")]
		public EntitySet<item> items
		{
			get
			{
				return this._items;
			}
			set
			{
				this._items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_items(item entity)
		{
			this.SendPropertyChanging();
			entity.category = this;
		}
		
		private void detach_items(item entity)
		{
			this.SendPropertyChanging();
			entity.category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.client")]
	public partial class client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private string _ip;
		
		private string _mac;
		
		private int _status;
		
		private System.Guid _group_id;
		
		private string _member_name;
		
		private System.Nullable<int> _usedminute;
		
		private System.Nullable<int> _remainminute;
		
		private System.Nullable<System.DateTime> _start;
		
		private string _app;
		
		private string _title;
		
		private string _tc;
		
		private System.Nullable<System.Guid> _ht;
		
		private System.Nullable<int> _wei;
		
		private EntitySet<employee_hour> _employee_hours;
		
		private EntitySet<reserve> _reserves;
		
		private EntityRef<timecode> _timecode;
		
		private EntityRef<group> _group;
		
		private EntityRef<hourtemplate> _hourtemplate;
		
		private EntityRef<member> _member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnipChanging(string value);
    partial void OnipChanged();
    partial void OnmacChanging(string value);
    partial void OnmacChanged();
    partial void OnstatusChanging(int value);
    partial void OnstatusChanged();
    partial void Ongroup_idChanging(System.Guid value);
    partial void Ongroup_idChanged();
    partial void Onmember_nameChanging(string value);
    partial void Onmember_nameChanged();
    partial void OnusedminuteChanging(System.Nullable<int> value);
    partial void OnusedminuteChanged();
    partial void OnremainminuteChanging(System.Nullable<int> value);
    partial void OnremainminuteChanged();
    partial void OnstartChanging(System.Nullable<System.DateTime> value);
    partial void OnstartChanged();
    partial void OnappChanging(string value);
    partial void OnappChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OntcChanging(string value);
    partial void OntcChanged();
    partial void OnhtChanging(System.Nullable<System.Guid> value);
    partial void OnhtChanged();
    partial void OnweiChanging(System.Nullable<int> value);
    partial void OnweiChanged();
    #endregion
		
		public client()
		{
			this._employee_hours = new EntitySet<employee_hour>(new Action<employee_hour>(this.attach_employee_hours), new Action<employee_hour>(this.detach_employee_hours));
			this._reserves = new EntitySet<reserve>(new Action<reserve>(this.attach_reserves), new Action<reserve>(this.detach_reserves));
			this._timecode = default(EntityRef<timecode>);
			this._group = default(EntityRef<group>);
			this._hourtemplate = default(EntityRef<hourtemplate>);
			this._member = default(EntityRef<member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ip", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ip
		{
			get
			{
				return this._ip;
			}
			set
			{
				if ((this._ip != value))
				{
					this.OnipChanging(value);
					this.SendPropertyChanging();
					this._ip = value;
					this.SendPropertyChanged("ip");
					this.OnipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mac", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string mac
		{
			get
			{
				return this._mac;
			}
			set
			{
				if ((this._mac != value))
				{
					this.OnmacChanging(value);
					this.SendPropertyChanging();
					this._mac = value;
					this.SendPropertyChanged("mac");
					this.OnmacChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int NOT NULL")]
		public int status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid group_id
		{
			get
			{
				return this._group_id;
			}
			set
			{
				if ((this._group_id != value))
				{
					if (this._group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongroup_idChanging(value);
					this.SendPropertyChanging();
					this._group_id = value;
					this.SendPropertyChanged("group_id");
					this.Ongroup_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_member_name", DbType="NVarChar(50)")]
		public string member_name
		{
			get
			{
				return this._member_name;
			}
			set
			{
				if ((this._member_name != value))
				{
					if (this._member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmember_nameChanging(value);
					this.SendPropertyChanging();
					this._member_name = value;
					this.SendPropertyChanged("member_name");
					this.Onmember_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usedminute", DbType="Int")]
		public System.Nullable<int> usedminute
		{
			get
			{
				return this._usedminute;
			}
			set
			{
				if ((this._usedminute != value))
				{
					this.OnusedminuteChanging(value);
					this.SendPropertyChanging();
					this._usedminute = value;
					this.SendPropertyChanged("usedminute");
					this.OnusedminuteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_remainminute", DbType="Int")]
		public System.Nullable<int> remainminute
		{
			get
			{
				return this._remainminute;
			}
			set
			{
				if ((this._remainminute != value))
				{
					this.OnremainminuteChanging(value);
					this.SendPropertyChanging();
					this._remainminute = value;
					this.SendPropertyChanged("remainminute");
					this.OnremainminuteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_start", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> start
		{
			get
			{
				return this._start;
			}
			set
			{
				if ((this._start != value))
				{
					this.OnstartChanging(value);
					this.SendPropertyChanging();
					this._start = value;
					this.SendPropertyChanged("start");
					this.OnstartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_app", DbType="NVarChar(MAX)")]
		public string app
		{
			get
			{
				return this._app;
			}
			set
			{
				if ((this._app != value))
				{
					this.OnappChanging(value);
					this.SendPropertyChanging();
					this._app = value;
					this.SendPropertyChanged("app");
					this.OnappChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(MAX)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tc", DbType="NChar(10)")]
		public string tc
		{
			get
			{
				return this._tc;
			}
			set
			{
				if ((this._tc != value))
				{
					if (this._timecode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntcChanging(value);
					this.SendPropertyChanging();
					this._tc = value;
					this.SendPropertyChanged("tc");
					this.OntcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ht", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ht
		{
			get
			{
				return this._ht;
			}
			set
			{
				if ((this._ht != value))
				{
					if (this._hourtemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnhtChanging(value);
					this.SendPropertyChanging();
					this._ht = value;
					this.SendPropertyChanged("ht");
					this.OnhtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wei", DbType="Int")]
		public System.Nullable<int> wei
		{
			get
			{
				return this._wei;
			}
			set
			{
				if ((this._wei != value))
				{
					this.OnweiChanging(value);
					this.SendPropertyChanging();
					this._wei = value;
					this.SendPropertyChanged("wei");
					this.OnweiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="client_employee_hour", Storage="_employee_hours", ThisKey="name", OtherKey="client_name")]
		public EntitySet<employee_hour> employee_hours
		{
			get
			{
				return this._employee_hours;
			}
			set
			{
				this._employee_hours.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="client_reserve", Storage="_reserves", ThisKey="name", OtherKey="client_name")]
		public EntitySet<reserve> reserves
		{
			get
			{
				return this._reserves;
			}
			set
			{
				this._reserves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="timecode_client", Storage="_timecode", ThisKey="tc", OtherKey="code", IsForeignKey=true)]
		public timecode timecode
		{
			get
			{
				return this._timecode.Entity;
			}
			set
			{
				timecode previousValue = this._timecode.Entity;
				if (((previousValue != value) 
							|| (this._timecode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._timecode.Entity = null;
						previousValue.clients.Remove(this);
					}
					this._timecode.Entity = value;
					if ((value != null))
					{
						value.clients.Add(this);
						this._tc = value.code;
					}
					else
					{
						this._tc = default(string);
					}
					this.SendPropertyChanged("timecode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="group_client", Storage="_group", ThisKey="group_id", OtherKey="id", IsForeignKey=true)]
		public group group
		{
			get
			{
				return this._group.Entity;
			}
			set
			{
				group previousValue = this._group.Entity;
				if (((previousValue != value) 
							|| (this._group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._group.Entity = null;
						previousValue.clients.Remove(this);
					}
					this._group.Entity = value;
					if ((value != null))
					{
						value.clients.Add(this);
						this._group_id = value.id;
					}
					else
					{
						this._group_id = default(System.Guid);
					}
					this.SendPropertyChanged("group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="hourtemplate_client", Storage="_hourtemplate", ThisKey="ht", OtherKey="id", IsForeignKey=true)]
		public hourtemplate hourtemplate
		{
			get
			{
				return this._hourtemplate.Entity;
			}
			set
			{
				hourtemplate previousValue = this._hourtemplate.Entity;
				if (((previousValue != value) 
							|| (this._hourtemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._hourtemplate.Entity = null;
						previousValue.clients.Remove(this);
					}
					this._hourtemplate.Entity = value;
					if ((value != null))
					{
						value.clients.Add(this);
						this._ht = value.id;
					}
					else
					{
						this._ht = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("hourtemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_client", Storage="_member", ThisKey="member_name", OtherKey="name", IsForeignKey=true)]
		public member member
		{
			get
			{
				return this._member.Entity;
			}
			set
			{
				member previousValue = this._member.Entity;
				if (((previousValue != value) 
							|| (this._member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._member.Entity = null;
						previousValue.clients.Remove(this);
					}
					this._member.Entity = value;
					if ((value != null))
					{
						value.clients.Add(this);
						this._member_name = value.name;
					}
					else
					{
						this._member_name = default(string);
					}
					this.SendPropertyChanged("member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_employee_hours(employee_hour entity)
		{
			this.SendPropertyChanging();
			entity.client = this;
		}
		
		private void detach_employee_hours(employee_hour entity)
		{
			this.SendPropertyChanging();
			entity.client = null;
		}
		
		private void attach_reserves(reserve entity)
		{
			this.SendPropertyChanging();
			entity.client = this;
		}
		
		private void detach_reserves(reserve entity)
		{
			this.SendPropertyChanging();
			entity.client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.config")]
	public partial class config : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _org_id;
		
		private string _org_email;
		
		private string _org_name;
		
		private string _org_phone;
		
		private System.Nullable<int> _newmember_price;
		
		private System.Nullable<int> _newmember_stock;
		
		private System.Nullable<int> _close_hour;
		
		private System.Nullable<int> _alert_minute;
		
		private string _alert_message;
		
		private System.Nullable<int> _idle_minute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onorg_idChanging(string value);
    partial void Onorg_idChanged();
    partial void Onorg_emailChanging(string value);
    partial void Onorg_emailChanged();
    partial void Onorg_nameChanging(string value);
    partial void Onorg_nameChanged();
    partial void Onorg_phoneChanging(string value);
    partial void Onorg_phoneChanged();
    partial void Onnewmember_priceChanging(System.Nullable<int> value);
    partial void Onnewmember_priceChanged();
    partial void Onnewmember_stockChanging(System.Nullable<int> value);
    partial void Onnewmember_stockChanged();
    partial void Onclose_hourChanging(System.Nullable<int> value);
    partial void Onclose_hourChanged();
    partial void Onalert_minuteChanging(System.Nullable<int> value);
    partial void Onalert_minuteChanged();
    partial void Onalert_messageChanging(string value);
    partial void Onalert_messageChanged();
    partial void Onidle_minuteChanging(System.Nullable<int> value);
    partial void Onidle_minuteChanged();
    #endregion
		
		public config()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_org_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string org_id
		{
			get
			{
				return this._org_id;
			}
			set
			{
				if ((this._org_id != value))
				{
					this.Onorg_idChanging(value);
					this.SendPropertyChanging();
					this._org_id = value;
					this.SendPropertyChanged("org_id");
					this.Onorg_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_org_email", DbType="NVarChar(MAX)")]
		public string org_email
		{
			get
			{
				return this._org_email;
			}
			set
			{
				if ((this._org_email != value))
				{
					this.Onorg_emailChanging(value);
					this.SendPropertyChanging();
					this._org_email = value;
					this.SendPropertyChanged("org_email");
					this.Onorg_emailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_org_name", DbType="NVarChar(MAX)")]
		public string org_name
		{
			get
			{
				return this._org_name;
			}
			set
			{
				if ((this._org_name != value))
				{
					this.Onorg_nameChanging(value);
					this.SendPropertyChanging();
					this._org_name = value;
					this.SendPropertyChanged("org_name");
					this.Onorg_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_org_phone", DbType="NVarChar(MAX)")]
		public string org_phone
		{
			get
			{
				return this._org_phone;
			}
			set
			{
				if ((this._org_phone != value))
				{
					this.Onorg_phoneChanging(value);
					this.SendPropertyChanging();
					this._org_phone = value;
					this.SendPropertyChanged("org_phone");
					this.Onorg_phoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newmember_price", DbType="Int")]
		public System.Nullable<int> newmember_price
		{
			get
			{
				return this._newmember_price;
			}
			set
			{
				if ((this._newmember_price != value))
				{
					this.Onnewmember_priceChanging(value);
					this.SendPropertyChanging();
					this._newmember_price = value;
					this.SendPropertyChanged("newmember_price");
					this.Onnewmember_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newmember_stock", DbType="Int")]
		public System.Nullable<int> newmember_stock
		{
			get
			{
				return this._newmember_stock;
			}
			set
			{
				if ((this._newmember_stock != value))
				{
					this.Onnewmember_stockChanging(value);
					this.SendPropertyChanging();
					this._newmember_stock = value;
					this.SendPropertyChanged("newmember_stock");
					this.Onnewmember_stockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_close_hour", DbType="Int")]
		public System.Nullable<int> close_hour
		{
			get
			{
				return this._close_hour;
			}
			set
			{
				if ((this._close_hour != value))
				{
					this.Onclose_hourChanging(value);
					this.SendPropertyChanging();
					this._close_hour = value;
					this.SendPropertyChanged("close_hour");
					this.Onclose_hourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alert_minute", DbType="Int")]
		public System.Nullable<int> alert_minute
		{
			get
			{
				return this._alert_minute;
			}
			set
			{
				if ((this._alert_minute != value))
				{
					this.Onalert_minuteChanging(value);
					this.SendPropertyChanging();
					this._alert_minute = value;
					this.SendPropertyChanged("alert_minute");
					this.Onalert_minuteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alert_message", DbType="NVarChar(MAX)")]
		public string alert_message
		{
			get
			{
				return this._alert_message;
			}
			set
			{
				if ((this._alert_message != value))
				{
					this.Onalert_messageChanging(value);
					this.SendPropertyChanging();
					this._alert_message = value;
					this.SendPropertyChanged("alert_message");
					this.Onalert_messageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idle_minute", DbType="Int")]
		public System.Nullable<int> idle_minute
		{
			get
			{
				return this._idle_minute;
			}
			set
			{
				if ((this._idle_minute != value))
				{
					this.Onidle_minuteChanging(value);
					this.SendPropertyChanging();
					this._idle_minute = value;
					this.SendPropertyChanged("idle_minute");
					this.Onidle_minuteChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.employee")]
	public partial class employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private string _password;
		
		private bool _isadmin;
		
		private EntitySet<employee_hour> _employee_hours;
		
		private EntitySet<employee_member> _employee_members;
		
		private EntitySet<employee_sale> _employee_sales;
		
		private EntitySet<employee_timecode> _employee_timecodes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnisadminChanging(bool value);
    partial void OnisadminChanged();
    #endregion
		
		public employee()
		{
			this._employee_hours = new EntitySet<employee_hour>(new Action<employee_hour>(this.attach_employee_hours), new Action<employee_hour>(this.detach_employee_hours));
			this._employee_members = new EntitySet<employee_member>(new Action<employee_member>(this.attach_employee_members), new Action<employee_member>(this.detach_employee_members));
			this._employee_sales = new EntitySet<employee_sale>(new Action<employee_sale>(this.attach_employee_sales), new Action<employee_sale>(this.detach_employee_sales));
			this._employee_timecodes = new EntitySet<employee_timecode>(new Action<employee_timecode>(this.attach_employee_timecodes), new Action<employee_timecode>(this.detach_employee_timecodes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isadmin", DbType="Bit NOT NULL")]
		public bool isadmin
		{
			get
			{
				return this._isadmin;
			}
			set
			{
				if ((this._isadmin != value))
				{
					this.OnisadminChanging(value);
					this.SendPropertyChanging();
					this._isadmin = value;
					this.SendPropertyChanged("isadmin");
					this.OnisadminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_employee_hour", Storage="_employee_hours", ThisKey="name", OtherKey="employee_name")]
		public EntitySet<employee_hour> employee_hours
		{
			get
			{
				return this._employee_hours;
			}
			set
			{
				this._employee_hours.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_employee_member", Storage="_employee_members", ThisKey="name", OtherKey="employee_name")]
		public EntitySet<employee_member> employee_members
		{
			get
			{
				return this._employee_members;
			}
			set
			{
				this._employee_members.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_employee_sale", Storage="_employee_sales", ThisKey="name", OtherKey="empoyee_name")]
		public EntitySet<employee_sale> employee_sales
		{
			get
			{
				return this._employee_sales;
			}
			set
			{
				this._employee_sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_employee_timecode", Storage="_employee_timecodes", ThisKey="name", OtherKey="employee_name")]
		public EntitySet<employee_timecode> employee_timecodes
		{
			get
			{
				return this._employee_timecodes;
			}
			set
			{
				this._employee_timecodes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_employee_hours(employee_hour entity)
		{
			this.SendPropertyChanging();
			entity.employee = this;
		}
		
		private void detach_employee_hours(employee_hour entity)
		{
			this.SendPropertyChanging();
			entity.employee = null;
		}
		
		private void attach_employee_members(employee_member entity)
		{
			this.SendPropertyChanging();
			entity.employee = this;
		}
		
		private void detach_employee_members(employee_member entity)
		{
			this.SendPropertyChanging();
			entity.employee = null;
		}
		
		private void attach_employee_sales(employee_sale entity)
		{
			this.SendPropertyChanging();
			entity.employee = this;
		}
		
		private void detach_employee_sales(employee_sale entity)
		{
			this.SendPropertyChanging();
			entity.employee = null;
		}
		
		private void attach_employee_timecodes(employee_timecode entity)
		{
			this.SendPropertyChanging();
			entity.employee = this;
		}
		
		private void detach_employee_timecodes(employee_timecode entity)
		{
			this.SendPropertyChanging();
			entity.employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.employee_hour")]
	public partial class employee_hour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _employee_name;
		
		private string _client_name;
		
		private int _price;
		
		private System.DateTime _ot;
		
		private EntityRef<client> _client;
		
		private EntityRef<employee> _employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void Onemployee_nameChanging(string value);
    partial void Onemployee_nameChanged();
    partial void Onclient_nameChanging(string value);
    partial void Onclient_nameChanged();
    partial void OnpriceChanging(int value);
    partial void OnpriceChanged();
    partial void OnotChanging(System.DateTime value);
    partial void OnotChanged();
    #endregion
		
		public employee_hour()
		{
			this._client = default(EntityRef<client>);
			this._employee = default(EntityRef<employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employee_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string employee_name
		{
			get
			{
				return this._employee_name;
			}
			set
			{
				if ((this._employee_name != value))
				{
					if (this._employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onemployee_nameChanging(value);
					this.SendPropertyChanging();
					this._employee_name = value;
					this.SendPropertyChanged("employee_name");
					this.Onemployee_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_client_name", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string client_name
		{
			get
			{
				return this._client_name;
			}
			set
			{
				if ((this._client_name != value))
				{
					if (this._client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onclient_nameChanging(value);
					this.SendPropertyChanging();
					this._client_name = value;
					this.SendPropertyChanged("client_name");
					this.Onclient_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Int NOT NULL")]
		public int price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ot", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ot
		{
			get
			{
				return this._ot;
			}
			set
			{
				if ((this._ot != value))
				{
					this.OnotChanging(value);
					this.SendPropertyChanging();
					this._ot = value;
					this.SendPropertyChanged("ot");
					this.OnotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="client_employee_hour", Storage="_client", ThisKey="client_name", OtherKey="name", IsForeignKey=true)]
		public client client
		{
			get
			{
				return this._client.Entity;
			}
			set
			{
				client previousValue = this._client.Entity;
				if (((previousValue != value) 
							|| (this._client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._client.Entity = null;
						previousValue.employee_hours.Remove(this);
					}
					this._client.Entity = value;
					if ((value != null))
					{
						value.employee_hours.Add(this);
						this._client_name = value.name;
					}
					else
					{
						this._client_name = default(string);
					}
					this.SendPropertyChanged("client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_employee_hour", Storage="_employee", ThisKey="employee_name", OtherKey="name", IsForeignKey=true)]
		public employee employee
		{
			get
			{
				return this._employee.Entity;
			}
			set
			{
				employee previousValue = this._employee.Entity;
				if (((previousValue != value) 
							|| (this._employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee.Entity = null;
						previousValue.employee_hours.Remove(this);
					}
					this._employee.Entity = value;
					if ((value != null))
					{
						value.employee_hours.Add(this);
						this._employee_name = value.name;
					}
					else
					{
						this._employee_name = default(string);
					}
					this.SendPropertyChanged("employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.employee_member")]
	public partial class employee_member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _employee_name;
		
		private string _member_name;
		
		private int _price;
		
		private System.DateTime _ot;
		
		private EntityRef<employee> _employee;
		
		private EntityRef<member> _member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void Onemployee_nameChanging(string value);
    partial void Onemployee_nameChanged();
    partial void Onmember_nameChanging(string value);
    partial void Onmember_nameChanged();
    partial void OnpriceChanging(int value);
    partial void OnpriceChanged();
    partial void OnotChanging(System.DateTime value);
    partial void OnotChanged();
    #endregion
		
		public employee_member()
		{
			this._employee = default(EntityRef<employee>);
			this._member = default(EntityRef<member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employee_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string employee_name
		{
			get
			{
				return this._employee_name;
			}
			set
			{
				if ((this._employee_name != value))
				{
					if (this._employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onemployee_nameChanging(value);
					this.SendPropertyChanging();
					this._employee_name = value;
					this.SendPropertyChanged("employee_name");
					this.Onemployee_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_member_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string member_name
		{
			get
			{
				return this._member_name;
			}
			set
			{
				if ((this._member_name != value))
				{
					if (this._member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmember_nameChanging(value);
					this.SendPropertyChanging();
					this._member_name = value;
					this.SendPropertyChanged("member_name");
					this.Onmember_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Int NOT NULL")]
		public int price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ot", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ot
		{
			get
			{
				return this._ot;
			}
			set
			{
				if ((this._ot != value))
				{
					this.OnotChanging(value);
					this.SendPropertyChanging();
					this._ot = value;
					this.SendPropertyChanged("ot");
					this.OnotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_employee_member", Storage="_employee", ThisKey="employee_name", OtherKey="name", IsForeignKey=true)]
		public employee employee
		{
			get
			{
				return this._employee.Entity;
			}
			set
			{
				employee previousValue = this._employee.Entity;
				if (((previousValue != value) 
							|| (this._employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee.Entity = null;
						previousValue.employee_members.Remove(this);
					}
					this._employee.Entity = value;
					if ((value != null))
					{
						value.employee_members.Add(this);
						this._employee_name = value.name;
					}
					else
					{
						this._employee_name = default(string);
					}
					this.SendPropertyChanged("employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_employee_member", Storage="_member", ThisKey="member_name", OtherKey="name", IsForeignKey=true)]
		public member member
		{
			get
			{
				return this._member.Entity;
			}
			set
			{
				member previousValue = this._member.Entity;
				if (((previousValue != value) 
							|| (this._member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._member.Entity = null;
						previousValue.employee_members.Remove(this);
					}
					this._member.Entity = value;
					if ((value != null))
					{
						value.employee_members.Add(this);
						this._member_name = value.name;
					}
					else
					{
						this._member_name = default(string);
					}
					this.SendPropertyChanged("member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.employee_sale")]
	public partial class employee_sale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _item_id;
		
		private int _qnt;
		
		private int _price;
		
		private int _total;
		
		private string _empoyee_name;
		
		private System.DateTime _ot;
		
		private EntityRef<employee> _employee;
		
		private EntityRef<item> _item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void Onitem_idChanging(System.Guid value);
    partial void Onitem_idChanged();
    partial void OnqntChanging(int value);
    partial void OnqntChanged();
    partial void OnpriceChanging(int value);
    partial void OnpriceChanged();
    partial void OntotalChanging(int value);
    partial void OntotalChanged();
    partial void Onempoyee_nameChanging(string value);
    partial void Onempoyee_nameChanged();
    partial void OnotChanging(System.DateTime value);
    partial void OnotChanged();
    #endregion
		
		public employee_sale()
		{
			this._employee = default(EntityRef<employee>);
			this._item = default(EntityRef<item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid item_id
		{
			get
			{
				return this._item_id;
			}
			set
			{
				if ((this._item_id != value))
				{
					if (this._item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onitem_idChanging(value);
					this.SendPropertyChanging();
					this._item_id = value;
					this.SendPropertyChanged("item_id");
					this.Onitem_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qnt", DbType="Int NOT NULL")]
		public int qnt
		{
			get
			{
				return this._qnt;
			}
			set
			{
				if ((this._qnt != value))
				{
					this.OnqntChanging(value);
					this.SendPropertyChanging();
					this._qnt = value;
					this.SendPropertyChanged("qnt");
					this.OnqntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Int NOT NULL")]
		public int price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total", DbType="Int NOT NULL")]
		public int total
		{
			get
			{
				return this._total;
			}
			set
			{
				if ((this._total != value))
				{
					this.OntotalChanging(value);
					this.SendPropertyChanging();
					this._total = value;
					this.SendPropertyChanged("total");
					this.OntotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empoyee_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string empoyee_name
		{
			get
			{
				return this._empoyee_name;
			}
			set
			{
				if ((this._empoyee_name != value))
				{
					if (this._employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onempoyee_nameChanging(value);
					this.SendPropertyChanging();
					this._empoyee_name = value;
					this.SendPropertyChanged("empoyee_name");
					this.Onempoyee_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ot", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ot
		{
			get
			{
				return this._ot;
			}
			set
			{
				if ((this._ot != value))
				{
					this.OnotChanging(value);
					this.SendPropertyChanging();
					this._ot = value;
					this.SendPropertyChanged("ot");
					this.OnotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_employee_sale", Storage="_employee", ThisKey="empoyee_name", OtherKey="name", IsForeignKey=true)]
		public employee employee
		{
			get
			{
				return this._employee.Entity;
			}
			set
			{
				employee previousValue = this._employee.Entity;
				if (((previousValue != value) 
							|| (this._employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee.Entity = null;
						previousValue.employee_sales.Remove(this);
					}
					this._employee.Entity = value;
					if ((value != null))
					{
						value.employee_sales.Add(this);
						this._empoyee_name = value.name;
					}
					else
					{
						this._empoyee_name = default(string);
					}
					this.SendPropertyChanged("employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_employee_sale", Storage="_item", ThisKey="item_id", OtherKey="id", IsForeignKey=true)]
		public item item
		{
			get
			{
				return this._item.Entity;
			}
			set
			{
				item previousValue = this._item.Entity;
				if (((previousValue != value) 
							|| (this._item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item.Entity = null;
						previousValue.employee_sales.Remove(this);
					}
					this._item.Entity = value;
					if ((value != null))
					{
						value.employee_sales.Add(this);
						this._item_id = value.id;
					}
					else
					{
						this._item_id = default(System.Guid);
					}
					this.SendPropertyChanged("item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.employee_timecode")]
	public partial class employee_timecode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _employee_name;
		
		private int _price;
		
		private string _timecode_code;
		
		private System.DateTime _ot;
		
		private EntityRef<employee> _employee;
		
		private EntityRef<timecode> _timecode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void Onemployee_nameChanging(string value);
    partial void Onemployee_nameChanged();
    partial void OnpriceChanging(int value);
    partial void OnpriceChanged();
    partial void Ontimecode_codeChanging(string value);
    partial void Ontimecode_codeChanged();
    partial void OnotChanging(System.DateTime value);
    partial void OnotChanged();
    #endregion
		
		public employee_timecode()
		{
			this._employee = default(EntityRef<employee>);
			this._timecode = default(EntityRef<timecode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employee_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string employee_name
		{
			get
			{
				return this._employee_name;
			}
			set
			{
				if ((this._employee_name != value))
				{
					if (this._employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onemployee_nameChanging(value);
					this.SendPropertyChanging();
					this._employee_name = value;
					this.SendPropertyChanged("employee_name");
					this.Onemployee_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Int NOT NULL")]
		public int price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timecode_code", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string timecode_code
		{
			get
			{
				return this._timecode_code;
			}
			set
			{
				if ((this._timecode_code != value))
				{
					if (this._timecode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontimecode_codeChanging(value);
					this.SendPropertyChanging();
					this._timecode_code = value;
					this.SendPropertyChanged("timecode_code");
					this.Ontimecode_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ot", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ot
		{
			get
			{
				return this._ot;
			}
			set
			{
				if ((this._ot != value))
				{
					this.OnotChanging(value);
					this.SendPropertyChanging();
					this._ot = value;
					this.SendPropertyChanged("ot");
					this.OnotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_employee_timecode", Storage="_employee", ThisKey="employee_name", OtherKey="name", IsForeignKey=true)]
		public employee employee
		{
			get
			{
				return this._employee.Entity;
			}
			set
			{
				employee previousValue = this._employee.Entity;
				if (((previousValue != value) 
							|| (this._employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee.Entity = null;
						previousValue.employee_timecodes.Remove(this);
					}
					this._employee.Entity = value;
					if ((value != null))
					{
						value.employee_timecodes.Add(this);
						this._employee_name = value.name;
					}
					else
					{
						this._employee_name = default(string);
					}
					this.SendPropertyChanged("employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="timecode_employee_timecode", Storage="_timecode", ThisKey="timecode_code", OtherKey="code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public timecode timecode
		{
			get
			{
				return this._timecode.Entity;
			}
			set
			{
				timecode previousValue = this._timecode.Entity;
				if (((previousValue != value) 
							|| (this._timecode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._timecode.Entity = null;
						previousValue.employee_timecodes.Remove(this);
					}
					this._timecode.Entity = value;
					if ((value != null))
					{
						value.employee_timecodes.Add(this);
						this._timecode_code = value.code;
					}
					else
					{
						this._timecode_code = default(string);
					}
					this.SendPropertyChanged("timecode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.groups")]
	public partial class group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _name;
		
		private int _timecodeprice;
		
		private int _memberprice;
		
		private int _hourprice;
		
		private bool _timecode;
		
		private bool _member;
		
		private bool _hour;
		
		private bool _prepairhour;
		
		private int _minprice;
		
		private bool _vip;
		
		private EntitySet<client> _clients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntimecodepriceChanging(int value);
    partial void OntimecodepriceChanged();
    partial void OnmemberpriceChanging(int value);
    partial void OnmemberpriceChanged();
    partial void OnhourpriceChanging(int value);
    partial void OnhourpriceChanged();
    partial void OntimecodeChanging(bool value);
    partial void OntimecodeChanged();
    partial void OnmemberChanging(bool value);
    partial void OnmemberChanged();
    partial void OnhourChanging(bool value);
    partial void OnhourChanged();
    partial void OnprepairhourChanging(bool value);
    partial void OnprepairhourChanged();
    partial void OnminpriceChanging(int value);
    partial void OnminpriceChanged();
    partial void OnvipChanging(bool value);
    partial void OnvipChanged();
    #endregion
		
		public group()
		{
			this._clients = new EntitySet<client>(new Action<client>(this.attach_clients), new Action<client>(this.detach_clients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timecodeprice", DbType="Int NOT NULL")]
		public int timecodeprice
		{
			get
			{
				return this._timecodeprice;
			}
			set
			{
				if ((this._timecodeprice != value))
				{
					this.OntimecodepriceChanging(value);
					this.SendPropertyChanging();
					this._timecodeprice = value;
					this.SendPropertyChanged("timecodeprice");
					this.OntimecodepriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memberprice", DbType="Int NOT NULL")]
		public int memberprice
		{
			get
			{
				return this._memberprice;
			}
			set
			{
				if ((this._memberprice != value))
				{
					this.OnmemberpriceChanging(value);
					this.SendPropertyChanging();
					this._memberprice = value;
					this.SendPropertyChanged("memberprice");
					this.OnmemberpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hourprice", DbType="Int NOT NULL")]
		public int hourprice
		{
			get
			{
				return this._hourprice;
			}
			set
			{
				if ((this._hourprice != value))
				{
					this.OnhourpriceChanging(value);
					this.SendPropertyChanging();
					this._hourprice = value;
					this.SendPropertyChanged("hourprice");
					this.OnhourpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timecode", DbType="Bit NOT NULL")]
		public bool timecode
		{
			get
			{
				return this._timecode;
			}
			set
			{
				if ((this._timecode != value))
				{
					this.OntimecodeChanging(value);
					this.SendPropertyChanging();
					this._timecode = value;
					this.SendPropertyChanged("timecode");
					this.OntimecodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_member", DbType="Bit NOT NULL")]
		public bool member
		{
			get
			{
				return this._member;
			}
			set
			{
				if ((this._member != value))
				{
					this.OnmemberChanging(value);
					this.SendPropertyChanging();
					this._member = value;
					this.SendPropertyChanged("member");
					this.OnmemberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hour", DbType="Bit NOT NULL")]
		public bool hour
		{
			get
			{
				return this._hour;
			}
			set
			{
				if ((this._hour != value))
				{
					this.OnhourChanging(value);
					this.SendPropertyChanging();
					this._hour = value;
					this.SendPropertyChanged("hour");
					this.OnhourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prepairhour", DbType="Bit NOT NULL")]
		public bool prepairhour
		{
			get
			{
				return this._prepairhour;
			}
			set
			{
				if ((this._prepairhour != value))
				{
					this.OnprepairhourChanging(value);
					this.SendPropertyChanging();
					this._prepairhour = value;
					this.SendPropertyChanged("prepairhour");
					this.OnprepairhourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_minprice", DbType="Int NOT NULL")]
		public int minprice
		{
			get
			{
				return this._minprice;
			}
			set
			{
				if ((this._minprice != value))
				{
					this.OnminpriceChanging(value);
					this.SendPropertyChanging();
					this._minprice = value;
					this.SendPropertyChanged("minprice");
					this.OnminpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vip", DbType="Bit NOT NULL")]
		public bool vip
		{
			get
			{
				return this._vip;
			}
			set
			{
				if ((this._vip != value))
				{
					this.OnvipChanging(value);
					this.SendPropertyChanging();
					this._vip = value;
					this.SendPropertyChanged("vip");
					this.OnvipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="group_client", Storage="_clients", ThisKey="id", OtherKey="group_id")]
		public EntitySet<client> clients
		{
			get
			{
				return this._clients;
			}
			set
			{
				this._clients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_clients(client entity)
		{
			this.SendPropertyChanging();
			entity.group = this;
		}
		
		private void detach_clients(client entity)
		{
			this.SendPropertyChanging();
			entity.group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.hourtemplate")]
	public partial class hourtemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _name;
		
		private int _minute;
		
		private int _price;
		
		private int _beghour;
		
		private int _endhour;
		
		private EntitySet<client> _clients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnminuteChanging(int value);
    partial void OnminuteChanged();
    partial void OnpriceChanging(int value);
    partial void OnpriceChanged();
    partial void OnbeghourChanging(int value);
    partial void OnbeghourChanged();
    partial void OnendhourChanging(int value);
    partial void OnendhourChanged();
    #endregion
		
		public hourtemplate()
		{
			this._clients = new EntitySet<client>(new Action<client>(this.attach_clients), new Action<client>(this.detach_clients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_minute", DbType="Int NOT NULL")]
		public int minute
		{
			get
			{
				return this._minute;
			}
			set
			{
				if ((this._minute != value))
				{
					this.OnminuteChanging(value);
					this.SendPropertyChanging();
					this._minute = value;
					this.SendPropertyChanged("minute");
					this.OnminuteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Int NOT NULL")]
		public int price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_beghour", DbType="Int NOT NULL")]
		public int beghour
		{
			get
			{
				return this._beghour;
			}
			set
			{
				if ((this._beghour != value))
				{
					this.OnbeghourChanging(value);
					this.SendPropertyChanging();
					this._beghour = value;
					this.SendPropertyChanged("beghour");
					this.OnbeghourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endhour", DbType="Int NOT NULL")]
		public int endhour
		{
			get
			{
				return this._endhour;
			}
			set
			{
				if ((this._endhour != value))
				{
					this.OnendhourChanging(value);
					this.SendPropertyChanging();
					this._endhour = value;
					this.SendPropertyChanged("endhour");
					this.OnendhourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="hourtemplate_client", Storage="_clients", ThisKey="id", OtherKey="ht")]
		public EntitySet<client> clients
		{
			get
			{
				return this._clients;
			}
			set
			{
				this._clients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_clients(client entity)
		{
			this.SendPropertyChanging();
			entity.hourtemplate = this;
		}
		
		private void detach_clients(client entity)
		{
			this.SendPropertyChanging();
			entity.hourtemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.item")]
	public partial class item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _name;
		
		private System.Guid _category_id;
		
		private int _price;
		
		private EntitySet<employee_sale> _employee_sales;
		
		private EntityRef<category> _category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Oncategory_idChanging(System.Guid value);
    partial void Oncategory_idChanged();
    partial void OnpriceChanging(int value);
    partial void OnpriceChanged();
    #endregion
		
		public item()
		{
			this._employee_sales = new EntitySet<employee_sale>(new Action<employee_sale>(this.attach_employee_sales), new Action<employee_sale>(this.detach_employee_sales));
			this._category = default(EntityRef<category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid category_id
		{
			get
			{
				return this._category_id;
			}
			set
			{
				if ((this._category_id != value))
				{
					if (this._category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncategory_idChanging(value);
					this.SendPropertyChanging();
					this._category_id = value;
					this.SendPropertyChanged("category_id");
					this.Oncategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Int NOT NULL")]
		public int price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_employee_sale", Storage="_employee_sales", ThisKey="id", OtherKey="item_id")]
		public EntitySet<employee_sale> employee_sales
		{
			get
			{
				return this._employee_sales;
			}
			set
			{
				this._employee_sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_item", Storage="_category", ThisKey="category_id", OtherKey="id", IsForeignKey=true)]
		public category category
		{
			get
			{
				return this._category.Entity;
			}
			set
			{
				category previousValue = this._category.Entity;
				if (((previousValue != value) 
							|| (this._category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._category.Entity = null;
						previousValue.items.Remove(this);
					}
					this._category.Entity = value;
					if ((value != null))
					{
						value.items.Add(this);
						this._category_id = value.id;
					}
					else
					{
						this._category_id = default(System.Guid);
					}
					this.SendPropertyChanged("category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_employee_sales(employee_sale entity)
		{
			this.SendPropertyChanging();
			entity.item = this;
		}
		
		private void detach_employee_sales(employee_sale entity)
		{
			this.SendPropertyChanging();
			entity.item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.member")]
	public partial class member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private string _password;
		
		private int _money;
		
		private System.DateTime _ot;
		
		private EntitySet<client> _clients;
		
		private EntitySet<employee_member> _employee_members;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnmoneyChanging(int value);
    partial void OnmoneyChanged();
    partial void OnotChanging(System.DateTime value);
    partial void OnotChanged();
    #endregion
		
		public member()
		{
			this._clients = new EntitySet<client>(new Action<client>(this.attach_clients), new Action<client>(this.detach_clients));
			this._employee_members = new EntitySet<employee_member>(new Action<employee_member>(this.attach_employee_members), new Action<employee_member>(this.detach_employee_members));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_money", DbType="Int NOT NULL")]
		public int money
		{
			get
			{
				return this._money;
			}
			set
			{
				if ((this._money != value))
				{
					this.OnmoneyChanging(value);
					this.SendPropertyChanging();
					this._money = value;
					this.SendPropertyChanged("money");
					this.OnmoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ot", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ot
		{
			get
			{
				return this._ot;
			}
			set
			{
				if ((this._ot != value))
				{
					this.OnotChanging(value);
					this.SendPropertyChanging();
					this._ot = value;
					this.SendPropertyChanged("ot");
					this.OnotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_client", Storage="_clients", ThisKey="name", OtherKey="member_name")]
		public EntitySet<client> clients
		{
			get
			{
				return this._clients;
			}
			set
			{
				this._clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_employee_member", Storage="_employee_members", ThisKey="name", OtherKey="member_name")]
		public EntitySet<employee_member> employee_members
		{
			get
			{
				return this._employee_members;
			}
			set
			{
				this._employee_members.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_clients(client entity)
		{
			this.SendPropertyChanging();
			entity.member = this;
		}
		
		private void detach_clients(client entity)
		{
			this.SendPropertyChanging();
			entity.member = null;
		}
		
		private void attach_employee_members(employee_member entity)
		{
			this.SendPropertyChanging();
			entity.member = this;
		}
		
		private void detach_employee_members(employee_member entity)
		{
			this.SendPropertyChanging();
			entity.member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.reserve")]
	public partial class reserve : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _client_name;
		
		private System.DateTime _ot;
		
		private string _steamid;
		
		private EntityRef<client> _client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void Onclient_nameChanging(string value);
    partial void Onclient_nameChanged();
    partial void OnotChanging(System.DateTime value);
    partial void OnotChanged();
    partial void OnsteamidChanging(string value);
    partial void OnsteamidChanged();
    #endregion
		
		public reserve()
		{
			this._client = default(EntityRef<client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_client_name", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string client_name
		{
			get
			{
				return this._client_name;
			}
			set
			{
				if ((this._client_name != value))
				{
					if (this._client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onclient_nameChanging(value);
					this.SendPropertyChanging();
					this._client_name = value;
					this.SendPropertyChanged("client_name");
					this.Onclient_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ot", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ot
		{
			get
			{
				return this._ot;
			}
			set
			{
				if ((this._ot != value))
				{
					this.OnotChanging(value);
					this.SendPropertyChanging();
					this._ot = value;
					this.SendPropertyChanged("ot");
					this.OnotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_steamid", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string steamid
		{
			get
			{
				return this._steamid;
			}
			set
			{
				if ((this._steamid != value))
				{
					this.OnsteamidChanging(value);
					this.SendPropertyChanging();
					this._steamid = value;
					this.SendPropertyChanged("steamid");
					this.OnsteamidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="client_reserve", Storage="_client", ThisKey="client_name", OtherKey="name", IsForeignKey=true)]
		public client client
		{
			get
			{
				return this._client.Entity;
			}
			set
			{
				client previousValue = this._client.Entity;
				if (((previousValue != value) 
							|| (this._client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._client.Entity = null;
						previousValue.reserves.Remove(this);
					}
					this._client.Entity = value;
					if ((value != null))
					{
						value.reserves.Add(this);
						this._client_name = value.name;
					}
					else
					{
						this._client_name = default(string);
					}
					this.SendPropertyChanged("client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
